#!/usr/bin/env python3
"""
Demonstra√ß√£o da refatora√ß√£o de testes com assertions determin√≠sticas
"""
import os
import tempfile
import sqlite3
from dotenv import load_dotenv

load_dotenv()

from config import DatabaseConfig
from database_scanner import DatabaseScanner


def test_sql_injection_old_style():
    """EXEMPLO ANTIGO: Com prints n√£o determin√≠sticos"""
    print("=== TESTE ANTIGO (COM PRINTS) ===")
    
    # Criar banco tempor√°rio
    with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as tmp:
        test_db_path = tmp.name
    
    try:
        # Setup banco
        conn = sqlite3.connect(test_db_path)
        cursor = conn.cursor()
        cursor.execute('CREATE TABLE test_users (id INTEGER, name TEXT)')
        cursor.execute("INSERT INTO test_users VALUES (1, 'John')")
        conn.commit()
        conn.close()
        
        config = DatabaseConfig(url=f"sqlite:///{test_db_path}", type="sqlite")
        scanner = DatabaseScanner(config)
        
        # Teste 1: Query v√°lida
        try:
            result = scanner.query_table_sample("test_users", 5)
            print(f"‚úÖ Query v√°lida: {len(result)} registros")
        except Exception as e:
            print(f"‚ùå Query v√°lida falhou: {e}")
        
        # Teste 2: SQL injection
        try:
            scanner.query_table_sample("test_users; DROP TABLE test_users;--", 5)
            print("‚ùå SQL injection N√ÉO foi bloqueada!")
        except Exception:
            print("‚úÖ SQL injection foi bloqueada")
        
        print("üéØ Teste 'passou' mas n√£o sabemos detalhes")
        
    finally:
        if os.path.exists(test_db_path):
            os.remove(test_db_path)


def test_sql_injection_new_style():
    """EXEMPLO NOVO: Com assertions determin√≠sticas"""
    print("=== TESTE NOVO (COM ASSERTIONS) ===")
    
    # Criar banco tempor√°rio
    with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as tmp:
        test_db_path = tmp.name
    
    try:
        # Setup banco
        conn = sqlite3.connect(test_db_path)
        cursor = conn.cursor()
        cursor.execute('CREATE TABLE test_users (id INTEGER, name TEXT)')
        cursor.execute("INSERT INTO test_users VALUES (1, 'John')")
        cursor.execute("INSERT INTO test_users VALUES (2, 'Jane')")
        conn.commit()
        conn.close()
        
        config = DatabaseConfig(url=f"sqlite:///{test_db_path}", type="sqlite")
        scanner = DatabaseScanner(config)
        
        # Teste 1: Query v√°lida com valida√ß√µes espec√≠ficas
        result = scanner.query_table_sample("test_users", 5)
        assert result is not None, "Query v√°lida deve retornar resultado"
        assert len(result) > 0, "Deve retornar registros"
        assert len(result) == 2, "Deve retornar exatamente 2 registros"
        print("‚úÖ Query v√°lida - VALIDADA com assertions")
        
        # Teste 2: SQL injection com valida√ß√£o espec√≠fica
        injection_blocked = False
        try:
            scanner.query_table_sample("test_users; DROP TABLE test_users;--", 5)
        except ValueError as e:
            assert "Tabela inv√°lida" in str(e), "Erro deve mencionar tabela inv√°lida"
            injection_blocked = True
        
        assert injection_blocked, "SQL injection deve ser bloqueada"
        print("‚úÖ SQL injection - BLOQUEADA com valida√ß√£o espec√≠fica")
        
        # Teste 3: Integridade dos dados
        conn = sqlite3.connect(test_db_path)
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM test_users")
        count = cursor.fetchone()[0]
        conn.close()
        
        assert count == 2, "Dados devem permanecer √≠ntegros"
        print("‚úÖ Integridade dos dados - VERIFICADA")
        
        # Teste 4: Par√¢metros inv√°lidos
        invalid_params_blocked = 0
        invalid_cases = [
            ("", 5),           # Nome vazio
            ("test_users", 0), # Limit zero
            ("test_users", -1) # Limit negativo
        ]
        
        for table, limit in invalid_cases:
            try:
                scanner.query_table_sample(table, limit)
            except ValueError:
                invalid_params_blocked += 1
        
        assert invalid_params_blocked == len(invalid_cases), "Todos os par√¢metros inv√°lidos devem ser bloqueados"
        print("‚úÖ Par√¢metros inv√°lidos - TODOS BLOQUEADOS")
        
        print("üéØ Teste PASSOU com valida√ß√µes espec√≠ficas e determin√≠sticas!")
        
    finally:
        if os.path.exists(test_db_path):
            os.remove(test_db_path)


def demonstrate_assertion_benefits():
    """Demonstra benef√≠cios espec√≠ficos das assertions"""
    print("\n" + "="*60)
    print("üîç AN√ÅLISE DETALHADA DOS BENEF√çCIOS")
    print("="*60)
    
    benefits = [
        {
            "aspecto": "Determinismo",
            "antes": "Teste 'passa' mesmo se logica falha",
            "depois": "Teste falha imediatamente se condi√ß√£o n√£o atendida"
        },
        {
            "aspecto": "Debugging",
            "antes": "print() mostra apenas sa√≠da visual",
            "depois": "assert fornece linha exata e condi√ß√£o espec√≠fica"
        },
        {
            "aspecto": "Automa√ß√£o",
            "antes": "Humano precisa interpretar output visual",
            "depois": "CI/CD pode executar e detectar falhas automaticamente"
        },
        {
            "aspecto": "Cobertura",
            "antes": "N√£o sabemos o que realmente foi testado",
            "depois": "Cada assert verifica comportamento espec√≠fico"
        },
        {
            "aspecto": "Regress√£o",
            "antes": "Mudan√ßas podem quebrar sem detec√ß√£o",
            "depois": "Qualquer mudan√ßa que quebre √© detectada imediatamente"
        }
    ]
    
    for benefit in benefits:
        print(f"\nüìã {benefit['aspecto']}:")
        print(f"   ‚ùå Antes: {benefit['antes']}")
        print(f"   ‚úÖ Depois: {benefit['depois']}")


def show_refactoring_checklist():
    """Mostra checklist para refatorar outros testes"""
    print("\n" + "="*60)
    print("üìù CHECKLIST PARA REFATORA√á√ÉO DE TESTES")
    print("="*60)
    
    checklist = [
        "1. Substituir print() por assert com mensagens descritivas",
        "2. Verificar condi√ß√µes espec√≠ficas em vez de apenas execu√ß√£o",
        "3. Usar fixtures para setup/teardown limpos",
        "4. Testar tanto casos positivos quanto negativos",
        "5. Validar estado dos dados ap√≥s opera√ß√µes",
        "6. Usar context managers (with pytest.raises) para exce√ß√µes",
        "7. Agrupar testes relacionados em classes",
        "8. Usar parametriza√ß√£o para testar m√∫ltiplos casos",
        "9. Adicionar testes de edge cases",
        "10. Configurar integra√ß√£o com CI/CD"
    ]
    
    for item in checklist:
        print(f"   ‚úÖ {item}")


if __name__ == "__main__":
    print("üîÑ DEMONSTRA√á√ÉO: REFATORA√á√ÉO DE TESTES")
    print("="*60)
    
    try:
        # Executar teste antigo
        test_sql_injection_old_style()
        
        print()
        
        # Executar teste novo
        test_sql_injection_new_style()
        
        # Mostrar an√°lise
        demonstrate_assertion_benefits()
        
        # Mostrar checklist
        show_refactoring_checklist()
        
        print("\n" + "="*60)
        print("üéâ REFATORA√á√ÉO DEMONSTRADA COM SUCESSO!")
        print("üí° Aplique este padr√£o aos outros testes:")
        print("   ‚Ä¢ test_vector_security.py")
        print("   ‚Ä¢ test_validation.py")
        print("   ‚Ä¢ test_env_validation.py")
        print("   ‚Ä¢ test_system_security.py")
        print("   ‚Ä¢ E todos os outros com print()")
        print("="*60)
        
    except Exception as e:
        print(f"‚ùå Erro na demonstra√ß√£o: {e}")
        import traceback
        traceback.print_exc()
