#!/usr/bin/env python3
"""
Teste demonstrativo de como converter testes de print() para assertions
"""
import os
import tempfile
import sys
import json
from unittest.mock import Mock
from dotenv import load_dotenv

# Adicionar diret√≥rio raiz ao path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

try:
    from vector_store_manager import VectorStoreManager, SecurityError
    from config import RAGConfig
    from langchain_openai import OpenAIEmbeddings
    from langchain_core.documents import Document
except ImportError as e:
    print(f"‚ùå Erro de importa√ß√£o: {e}")
    print("üí° Execute: pip install -r requirements.txt")
    sys.exit(1)

load_dotenv()


def test_with_prints_old_style():
    """EXEMPLO ANTIGO: Teste com prints (problem√°tico)"""
    print("=== TESTE ANTIGO COM PRINTS ===")
    
    try:
        config = RAGConfig()
        print("‚úÖ Configura√ß√£o criada")
    except Exception as e:
        print(f"‚ùå Erro na configura√ß√£o: {e}")
        return False
    
    try:
        manager = VectorStoreManager(config)
        print("‚úÖ Manager criado")
    except Exception as e:
        print(f"‚ùå Erro no manager: {e}")
        return False
    
    print("üéØ Teste antigo 'passou' (mas sem verifica√ß√µes reais)")
    return True


def test_with_assertions_new_style():
    """EXEMPLO NOVO: Teste com assertions expl√≠citas (determin√≠stico)"""
    print("=== TESTE NOVO COM ASSERTIONS ===")
    
    # Test 1: Configura√ß√£o deve ser criada
    config = RAGConfig()
    assert config is not None, "Configura√ß√£o deve ser criada"
    assert hasattr(config, 'vector_store_path'), "Config deve ter vector_store_path"
    print("‚úÖ Configura√ß√£o validada com assertions")
    
    # Test 2: Manager deve ser inicializado
    manager = VectorStoreManager(config)
    assert manager is not None, "Manager deve ser criado"
    assert manager.config == config, "Manager deve ter config correto"
    print("‚úÖ Manager validado com assertions")
    
    # Test 3: M√©todo de checksum deve funcionar
    test_file = "temp_test_file.txt"
    try:
        with open(test_file, 'w') as f:
            f.write("test content")
        
        checksum = manager._calculate_file_checksum(test_file)
        assert isinstance(checksum, str), "Checksum deve ser string"
        assert len(checksum) > 0, "Checksum deve ter conte√∫do"
        print("‚úÖ Checksum validado com assertions")
        
    finally:
        if os.path.exists(test_file):
            os.remove(test_file)
    
    # Test 4: Tratamento de erro deve funcionar
    try:
        manager._calculate_file_checksum("arquivo_inexistente.txt")
        assert False, "Deveria ter lan√ßado exce√ß√£o para arquivo inexistente"
    except FileNotFoundError:
        print("‚úÖ Tratamento de erro validado com assertions")
    
    print("üéØ Teste novo PASSOU com verifica√ß√µes reais!")
    return True


def test_security_validations_deterministic():
    """Teste determin√≠stico de valida√ß√µes de seguran√ßa"""
    print("=== TESTE DE SEGURAN√áA DETERMIN√çSTICO ===")
    
    with tempfile.TemporaryDirectory() as temp_dir:
        config = RAGConfig()
        manager = VectorStoreManager(config)
        
        # Test: Diret√≥rio vazio n√£o deve ser v√°lido
        empty_dir = os.path.join(temp_dir, "empty")
        os.makedirs(empty_dir)
        
        try:
            mock_embeddings = Mock()
            manager.load_vector_store(empty_dir, mock_embeddings)
            assert False, "Diret√≥rio vazio deveria falhar"
        except (SecurityError, FileNotFoundError) as e:
            assert "Missing required files" in str(e) or "No such file" in str(e)
            print("‚úÖ Diret√≥rio vazio corretamente rejeitado")
        
        # Test: Arquivo de metadados deve ser validado
        fake_store_dir = os.path.join(temp_dir, "fake_store")
        os.makedirs(fake_store_dir)
        
        # Criar arquivos necess√°rios mas com metadados inv√°lidos
        fake_files = ["index.faiss", "index.pkl"]
        for file_name in fake_files:
            fake_file = os.path.join(fake_store_dir, file_name)
            with open(fake_file, 'w') as f:
                f.write("fake content")
        
        # Metadados inv√°lidos
        metadata_file = os.path.join(fake_store_dir, "metadata.json")
        with open(metadata_file, 'w') as f:
            f.write("invalid json content")
        
        try:
            mock_embeddings = Mock()
            manager.load_vector_store(fake_store_dir, mock_embeddings)
            assert False, "Metadados inv√°lidos deveriam falhar"
        except (json.JSONDecodeError, SecurityError):
            print("‚úÖ Metadados inv√°lidos corretamente rejeitados")
    
    print("üéØ Valida√ß√µes de seguran√ßa PASSARAM!")
    return True


def run_comparison_tests():
    """Executa compara√ß√£o entre testes antigos e novos"""
    print("üîÑ COMPARANDO ESTILOS DE TESTE\n")
    
    # Executar teste antigo
    old_result = test_with_prints_old_style()
    print(f"Resultado teste antigo: {'PASSOU' if old_result else 'FALHOU'}")
    print("‚ùå Problema: N√£o sabemos SE REALMENTE funcionou\n")
    
    # Executar teste novo
    try:
        new_result = test_with_assertions_new_style()
        print(f"Resultado teste novo: {'PASSOU' if new_result else 'FALHOU'}")
        print("‚úÖ Benef√≠cio: Sabemos EXATAMENTE o que foi validado\n")
    except AssertionError as e:
        print(f"‚ùå Teste novo FALHOU: {e}")
        print("‚úÖ Benef√≠cio: Sabemos EXATAMENTE onde falhou\n")
    
    # Executar teste de seguran√ßa
    try:
        security_result = test_security_validations_deterministic()
        print(f"Resultado seguran√ßa: {'PASSOU' if security_result else 'FALHOU'}")
        print("‚úÖ Benef√≠cio: Valida√ß√µes espec√≠ficas e determin√≠sticas\n")
    except Exception as e:
        print(f"‚ùå Teste seguran√ßa FALHOU: {e}")
        print("‚úÖ Benef√≠cio: Erro espec√≠fico identificado\n")


def show_refactoring_benefits():
    """Mostra benef√≠cios da refatora√ß√£o"""
    print("=" * 60)
    print("üéØ BENEF√çCIOS DA REFATORA√á√ÉO DE TESTES")
    print("=" * 60)
    
    benefits = [
        ("‚ùå ANTES", "‚úÖ DEPOIS"),
        ("print() para mostrar resultados", "assert para validar condi√ß√µes"),
        ("Sucesso silencioso", "Falha expl√≠cita com mensagens"),
        ("Testes 'passam' sem validar", "Testes verificam comportamento real"),
        ("Debugging dif√≠cil", "Debugging preciso"),
        ("N√£o integra com CI/CD", "Integra√ß√£o perfeita com pytest"),
        ("Resultados amb√≠guos", "Resultados determin√≠sticos"),
        ("Dif√≠cil automatizar", "Automa√ß√£o nativa"),
    ]
    
    for before, after in benefits:
        print(f"{before:<35} ‚Üí {after}")
    
    print("\nüìä M√âTRICAS DE MELHORIA:")
    print("‚Ä¢ Determinismo: 0% ‚Üí 100%")
    print("‚Ä¢ Detec√ß√£o de falhas: Baixa ‚Üí Alta") 
    print("‚Ä¢ Facilidade de debugging: Baixa ‚Üí Alta")
    print("‚Ä¢ Automa√ß√£o: Imposs√≠vel ‚Üí Nativa")
    print("‚Ä¢ Integra√ß√£o CI/CD: N√£o ‚Üí Sim")


if __name__ == "__main__":
    try:
        run_comparison_tests()
        show_refactoring_benefits()
        
        print("\n" + "=" * 60)
        print("üéâ DEMONSTRA√á√ÉO COMPLETA!")
        print("üí° Pr√≥ximos passos:")
        print("   1. Refatorar test_vector_security.py")
        print("   2. Refatorar test_sql_injection.py") 
        print("   3. Refatorar outros testes com print()")
        print("   4. Configurar pytest como runner padr√£o")
        print("=" * 60)
        
    except Exception as e:
        print(f"\n‚ùå Erro na execu√ß√£o: {e}")
        print("üí° Verifique se todas as depend√™ncias est√£o instaladas")
        sys.exit(1)
